const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://cgscbtxtgualkfalouwh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNnc2NidHh0Z3VhbGtmYWxvdXdoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5MDY3MzYsImV4cCI6MjA3MDQ4MjczNn0.F0iFoFEJr87g4nA6Z7U1BK3t3ModxgZC2eWNIKRA0u8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugTimeIssue() {
  console.log('üîç ÍπÄÌÉÅÏàò 9Ïõî 17Ïùº ÏãúÍ∞Ñ ÌëúÏãú Î¨∏Ï†ú Î∂ÑÏÑù...\n');

  try {
    // 1. ÍπÄÌÉÅÏàò ÏßÅÏõê Ï†ïÎ≥¥ ÌôïÏù∏
    const { data: employeeData, error: employeeError } = await supabase
      .from('employees')
      .select('id, name, employee_id')
      .eq('name', 'ÍπÄÌÉÅÏàò');
    
    if (employeeError) {
      console.error('‚ùå ÏßÅÏõê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', employeeError);
      return;
    }
    
    const kimEmployeeId = employeeData?.[0]?.id;
    if (!kimEmployeeId) {
      console.error('‚ùå ÍπÄÌÉÅÏàò ÏßÅÏõê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    console.log('üë§ ÍπÄÌÉÅÏàò Ï†ïÎ≥¥:');
    console.log(`  ID: ${kimEmployeeId}`);
    console.log(`  Ïù¥Î¶Ñ: ${employeeData[0].name}`);
    console.log(`  ÏÇ¨Î≤à: ${employeeData[0].employee_id}`);

    // 2. 9Ïõî 17Ïùº attendance Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('\n2Ô∏è‚É£ 9Ïõî 17Ïùº Attendance Îç∞Ïù¥ÌÑ∞:');
    const { data: attendanceData, error: attendanceError } = await supabase
      .from('attendance')
      .select('*')
      .eq('employee_id', kimEmployeeId)
      .eq('date', '2025-09-17');
    
    if (attendanceError) {
      console.error('‚ùå Attendance Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', attendanceError);
    } else {
      console.log(`üìä ÍπÄÌÉÅÏàò 9Ïõî 17Ïùº Attendance Î†àÏΩîÎìú Ïàò: ${attendanceData?.length || 0}`);
      attendanceData?.forEach((record, index) => {
        console.log(`\n  Î†àÏΩîÎìú ${index + 1}:`);
        console.log(`    employee_id: ${record.employee_id}`);
        console.log(`    date: ${record.date}`);
        console.log(`    check_in_time: ${record.check_in_time}`);
        console.log(`    check_out_time: ${record.check_out_time}`);
        console.log(`    total_hours: ${record.total_hours}`);
        console.log(`    status: ${record.status}`);
        console.log(`    notes: ${record.notes}`);
        console.log(`    created_at: ${record.created_at}`);
        console.log(`    updated_at: ${record.updated_at}`);
        
        // ÏãúÍ∞Ñ Î≥ÄÌôò ÌÖåÏä§Ìä∏
        if (record.check_in_time) {
          console.log(`\n  üïê ÏãúÍ∞Ñ Î≥ÄÌôò ÌÖåÏä§Ìä∏:`);
          console.log(`    ÏõêÎ≥∏ ÏãúÍ∞Ñ: ${record.check_in_time}`);
          
          // UTC ÏãúÍ∞ÑÏúºÎ°ú Í∞ÄÏ†ïÌïòÍ≥† ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
          const utcTime = new Date(`2000-01-01T${record.check_in_time}`);
          const koreaTime = new Date(utcTime.getTime() + (9 * 60 * 60 * 1000));
          console.log(`    UTC ‚Üí ÌïúÍµ≠: ${koreaTime.toTimeString().substring(0, 5)}`);
          
          // Ïù¥ÎØ∏ ÌïúÍµ≠ ÏãúÍ∞ÑÏù¥ÎùºÍ≥† Í∞ÄÏ†ï
          console.log(`    ÌïúÍµ≠ ÏãúÍ∞Ñ Í∑∏ÎåÄÎ°ú: ${record.check_in_time.substring(0, 5)}`);
        }
      });
    }

    // 3. 9Ïõî 17Ïùº schedules Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('\n3Ô∏è‚É£ 9Ïõî 17Ïùº Schedules Îç∞Ïù¥ÌÑ∞:');
    const { data: schedulesData, error: schedulesError } = await supabase
      .from('schedules')
      .select('*')
      .eq('employee_id', kimEmployeeId)
      .eq('schedule_date', '2025-09-17');
    
    if (schedulesError) {
      console.error('‚ùå Schedules Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', schedulesError);
    } else {
      console.log(`üìä ÍπÄÌÉÅÏàò 9Ïõî 17Ïùº Schedules Î†àÏΩîÎìú Ïàò: ${schedulesData?.length || 0}`);
      schedulesData?.forEach((record, index) => {
        console.log(`\n  Î†àÏΩîÎìú ${index + 1}:`);
        console.log(`    employee_id: ${record.employee_id}`);
        console.log(`    schedule_date: ${record.schedule_date}`);
        console.log(`    scheduled_start: ${record.scheduled_start}`);
        console.log(`    scheduled_end: ${record.scheduled_end}`);
        console.log(`    actual_start: ${record.actual_start}`);
        console.log(`    actual_end: ${record.actual_end}`);
        console.log(`    status: ${record.status}`);
        console.log(`    employee_note: ${record.employee_note}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò:', error);
  }
}

debugTimeIssue();
