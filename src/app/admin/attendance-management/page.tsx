'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { auth, supabase } from '@/lib/supabase';
import { 
  Clock, MapPin, Users, Calendar, Filter, Download,
  Search, Eye, CheckCircle, XCircle, AlertCircle,
  TrendingUp, BarChart3, Download as DownloadIcon,
  Coffee, Edit3, Save, X
} from 'lucide-react';

interface AttendanceRecord {
  id: string;
  employee_id: string;
  employee_name: string;
  employee_id_code: string;
  employment_type: string;
  schedule_date: string;
  scheduled_start: string;
  scheduled_end: string;
  actual_start: string | null;
  actual_end: string | null;
  break_minutes: number;
  total_hours: number;
  overtime_hours: number;
  status: string;
  employee_note: string;
  manager_note: string;
  schedule_count: number;
  first_schedule_start: string;
  last_schedule_end: string;
}

export default function AttendanceManagementPage() {
  const router = useRouter();
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [attendanceRecords, setAttendanceRecords] = useState<AttendanceRecord[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [editingRecord, setEditingRecord] = useState<string | null>(null);
  const [editForm, setEditForm] = useState({
    checkInTime: '',
    checkOutTime: ''
  });

  // ÌïúÍµ≠ ÏãúÍ∞Ñ Í∏∞Ï§ÄÏúºÎ°ú Ïò§Îäò ÎÇ†Ïßú ÏÑ§Ï†ï
  const getKoreaToday = () => {
    const now = new Date();
    const koreaTime = new Date(now.getTime() + (9 * 60 * 60 * 1000)); // UTC+9
    return koreaTime.toISOString().split('T')[0];
  };

  const [selectedDate, setSelectedDate] = useState(getKoreaToday());
  const [selectedDepartment, setSelectedDepartment] = useState('Ï†ÑÏ≤¥ Î∂ÄÏÑú');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    checkUser();
  }, []);

  useEffect(() => {
    if (currentUser) {
      loadData();
    }
  }, [currentUser, selectedDate]);

  const checkUser = async () => {
    try {
      // localStorage Í∏∞Î∞ò Ïù∏Ï¶ù ÌôïÏù∏
      if (typeof window === 'undefined') return;
      
      const isLoggedIn = localStorage.getItem('isLoggedIn');
      const currentEmployee = localStorage.getItem('currentEmployee');
      
      if (!isLoggedIn || !currentEmployee) {
        router.push('/login');
        return;
      }
      
      const employee = JSON.parse(currentEmployee);
      
      // Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
      if (employee.role !== 'admin' && 
          employee.role !== 'manager' &&
          employee.name !== 'ÍπÄÌÉÅÏàò') {
        router.push('/dashboard');
        return;
      }
      
      setCurrentUser(employee);
    } catch (error) {
      console.error('ÏÇ¨Ïö©Ïûê ÌôïÏù∏ Ïò§Î•ò:', error);
      router.push('/login');
    }
  };

  // Í¥ÄÎ¶¨ÏûêÍ∞Ä Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞ÑÏùÑ ÏàòÏ†ïÌïòÎäî Ìï®Ïàò
  const updateAttendanceTime = async (employeeId: string, date: string, checkInTime: string, checkOutTime: string) => {
    try {
      console.log(`üîÑ Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ï: ${employeeId}, ${date}, ${checkInTime}, ${checkOutTime}`);
      
      // Í∑ºÎ¨¥ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
      let totalHours = 0;
      if (checkInTime && checkOutTime) {
        const startTime = new Date(`2000-01-01T${checkInTime}`);
        const endTime = new Date(`2000-01-01T${checkOutTime}`);
        totalHours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);
      }
      
      // attendance ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ ÎòêÎäî ÏÉùÏÑ±
      const { error: updateError } = await supabase
        .from('attendance')
        .upsert({
          employee_id: employeeId,
          date: date,
          check_in_time: checkInTime,
          check_out_time: checkOutTime,
          total_hours: totalHours,
          overtime_hours: 0,
          status: checkOutTime ? 'completed' : 'confirmed',
          auto_checkout: false,
          updated_at: new Date().toISOString()
        });
      
      if (updateError) {
        console.error('‚ùå Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ï Ïã§Ìå®:', updateError);
        throw updateError;
      } else {
        console.log('‚úÖ Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ï ÏôÑÎ£å');
        // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
        loadData();
      }
    } catch (error) {
      console.error('Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ï Ïò§Î•ò:', error);
      throw error;
    }
  };

  // Ìé∏Ïßë Î™®Îìú ÏãúÏûë
  const startEdit = (record: AttendanceRecord) => {
    setEditingRecord(record.employee_id);
    setEditForm({
      checkInTime: record.actual_start ? record.actual_start.split('T')[1]?.substring(0, 5) || '' : '',
      checkOutTime: record.actual_end ? record.actual_end.split('T')[1]?.substring(0, 5) || '' : ''
    });
  };

  // Ìé∏Ïßë Ï∑®ÏÜå
  const cancelEdit = () => {
    setEditingRecord(null);
    setEditForm({ checkInTime: '', checkOutTime: '' });
  };

  // Ìé∏Ïßë Ï†ÄÏû•
  const saveEdit = async (record: AttendanceRecord) => {
    try {
      await updateAttendanceTime(
        record.employee_id,
        record.schedule_date,
        editForm.checkInTime,
        editForm.checkOutTime
      );
      setEditingRecord(null);
      setEditForm({ checkInTime: '', checkOutTime: '' });
    } catch (error) {
      console.error('Ìé∏Ïßë Ï†ÄÏû• Ïã§Ìå®:', error);
      alert('Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // ÏÉÅÏÑ∏Î≥¥Í∏∞ Ìï®Ïàò
  const viewDetails = (record: AttendanceRecord) => {
    const details = `
ÏßÅÏõê Ï†ïÎ≥¥:
- Ïù¥Î¶Ñ: ${record.employee_name}
- ÏÇ¨Î≤à: ${record.employee_id_code}
- Í≥†Ïö©ÌòïÌÉú: ${record.employment_type}

Ï∂úÍ∑º Ï†ïÎ≥¥:
- Ïä§ÏºÄÏ§Ñ: ${record.scheduled_start ? formatTime(record.scheduled_start) : '-'} ~ ${record.scheduled_end ? formatTime(record.scheduled_end) : '-'}
- Ïã§Ï†ú Ï∂úÍ∑º: ${formatTime(record.actual_start)}
- Ïã§Ï†ú Ìá¥Í∑º: ${formatTime(record.actual_end)}
- Í∑ºÎ¨¥ ÏãúÍ∞Ñ: ${record.total_hours > 0 ? formatWorkTime(record.total_hours) : '-'}
- ÏÉÅÌÉú: ${getStatusText(getActualStatus(record))}

ÏúÑÏπò Ï†ïÎ≥¥:
- ÏúÑÏπò Ï∂îÏ†Å: ÎπÑÌôúÏÑ±ÌôîÎê®
    `;
    alert(details);
  };

  // ÌÜµÍ≥ÑÎ≥¥Í∏∞ Ìï®Ïàò
  const viewStatistics = (record: AttendanceRecord) => {
    const stats = `
${record.employee_name} ÌÜµÍ≥Ñ Ï†ïÎ≥¥:

Ïò§Îäò Í∑ºÎ¨¥ ÌòÑÌô©:
- Ï∂úÍ∑º ÏãúÍ∞Ñ: ${formatTime(record.actual_start)}
- Ìá¥Í∑º ÏãúÍ∞Ñ: ${formatTime(record.actual_end)}
- Ï¥ù Í∑ºÎ¨¥ÏãúÍ∞Ñ: ${record.total_hours > 0 ? formatWorkTime(record.total_hours) : '-'}
- ÏÉÅÌÉú: ${getStatusText(getActualStatus(record))}

Ï∞∏Í≥†: ÏÉÅÏÑ∏Ìïú ÏõîÎ≥Ñ/Ï£ºÎ≥Ñ ÌÜµÍ≥ÑÎäî Ï∂îÌõÑ Íµ¨ÌòÑ ÏòàÏ†ïÏûÖÎãàÎã§.
    `;
    alert(stats);
  };

  const loadData = async () => {
    try {
      setIsLoading(true);
      console.log("Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...", { selectedDate });

      // 1. Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      const { data: scheduleData, error: scheduleError } = await supabase
        .from('schedules')
        .select(`
          *,
          employees!schedules_employee_id_fkey (
            id,
            name,
            employee_id,
            employment_type
          )
        `)
        .eq('schedule_date', selectedDate)
        .order('scheduled_start', { ascending: true });

      if (scheduleError) {
        console.error('Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', scheduleError);
        throw scheduleError;
      }

      console.log(`üìÖ ${selectedDate} Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞:`, scheduleData?.length || 0);

      // 2. Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      const { data: attendanceData, error: attendanceError } = await supabase
        .from('attendance')
        .select('*')
        .eq('date', selectedDate);

      if (attendanceError) {
        console.error('Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', attendanceError);
        throw attendanceError;
      }

      console.log(`üìä ${selectedDate} Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞:`, attendanceData?.length || 0);

      // 3. Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò Î∞è Î≥ëÌï©
      const employeeMap = new Map();
      
      // Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
      if (scheduleData) {
        scheduleData.forEach(schedule => {
          const employee = schedule.employees;
          if (!employee) return;

          const employeeKey = schedule.employee_id;
          
          if (!employeeMap.has(employeeKey)) {
            employeeMap.set(employeeKey, {
              id: schedule.id,
              employee_id: schedule.employee_id,
              employee_name: employee.name,
              employee_id_code: employee.employee_id,
              employment_type: employee.employment_type || "ÎØ∏ÏßÄÏ†ï",
              schedule_date: schedule.schedule_date,
              scheduled_start: schedule.scheduled_start,
              scheduled_end: schedule.scheduled_end,
              actual_start: schedule.actual_start,
              actual_end: schedule.actual_end,
              break_minutes: schedule.break_minutes || 0,
              total_hours: 0,
              overtime_hours: 0,
              status: schedule.status || 'pending',
              employee_note: schedule.employee_note || "",
              manager_note: schedule.manager_note || "",
              schedule_count: 1,
              first_schedule_start: schedule.scheduled_start,
              last_schedule_end: schedule.scheduled_end
            });
          } else {
            const existing = employeeMap.get(employeeKey);
            existing.schedule_count += 1;
            existing.last_schedule_end = schedule.scheduled_end;
          }
        });
      }

      // Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ÏôÄ Î≥ëÌï©
      if (attendanceData) {
        for (const attendance of attendanceData) {
          const employeeKey = attendance.employee_id;
          
          if (employeeMap.has(employeeKey)) {
            const record = employeeMap.get(employeeKey);
            record.actual_start = attendance.check_in_time ? `${selectedDate}T${attendance.check_in_time}` : null;
            record.actual_end = attendance.check_out_time ? `${selectedDate}T${attendance.check_out_time}` : null;
            record.total_hours = attendance.total_hours || 0;
            record.overtime_hours = attendance.overtime_hours || 0;
            record.status = attendance.status || record.status;
          } else {
            // Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞Îßå ÏûàÍ≥† Ïä§ÏºÄÏ§ÑÏù¥ ÏóÜÎäî Í≤ΩÏö∞
            const { data: employee } = await supabase
              .from('employees')
              .select('name, employee_id, employment_type')
              .eq('id', attendance.employee_id)
              .single();

            if (employee) {
              employeeMap.set(employeeKey, {
                id: attendance.id,
                employee_id: attendance.employee_id,
                employee_name: employee.name,
                employee_id_code: employee.employee_id,
                employment_type: employee.employment_type || "ÎØ∏ÏßÄÏ†ï",
                schedule_date: selectedDate,
                scheduled_start: null,
                scheduled_end: null,
                actual_start: attendance.check_in_time ? `${selectedDate}T${attendance.check_in_time}` : null,
                actual_end: attendance.check_out_time ? `${selectedDate}T${attendance.check_out_time}` : null,
                break_minutes: 0,
                total_hours: attendance.total_hours || 0,
                overtime_hours: attendance.overtime_hours || 0,
                status: attendance.status || 'pending',
                employee_note: "",
                manager_note: "",
                schedule_count: 0,
                first_schedule_start: null,
                last_schedule_end: null
              });
            }
          }
        }
      }

      const records = Array.from(employeeMap.values());
      setAttendanceRecords(records);
      console.log('‚úÖ Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å:', records.length);

    } catch (error) {
      console.error("Ï∂úÍ∑º Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë Ïò§Î•ò:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatTime = (timeString: string | null) => {
    if (!timeString) return '-';
    
    // ÏãúÍ∞ÑÎßå ÏûàÎäî Í≤ΩÏö∞ (HH:MM:SS ÌòïÏãù)
    if (timeString.match(/^\d{2}:\d{2}:\d{2}$/)) {
      return timeString.substring(0, 5); // HH:MMÎßå Î∞òÌôò
    }
    
    // ISO ÎÇ†Ïßú ÌòïÏãùÏù∏ Í≤ΩÏö∞ - Ïù¥ÎØ∏ ÌïúÍµ≠ ÏãúÍ∞ÑÏù¥ÎØÄÎ°ú Ï∂îÍ∞Ä Î≥ÄÌôò Î∂àÌïÑÏöî
    try {
      const date = new Date(timeString);
      
      // Ïù¥ÎØ∏ ÌïúÍµ≠ ÏãúÍ∞ÑÏù¥ÎØÄÎ°ú Ï∂îÍ∞Ä Î≥ÄÌôò ÏóÜÏù¥ Î∞îÎ°ú ÏãúÍ∞Ñ Ï∂îÏ∂ú
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      
      return `${hours}:${minutes}`;
    } catch (error) {
      console.error('ÏãúÍ∞Ñ Î≥ÄÌôò Ïò§Î•ò:', error, timeString);
      return timeString; // ÌååÏã± Ïã§Ìå® Ïãú ÏõêÎ≥∏ Î∞òÌôò
    }
  };

  // Í∑ºÎ¨¥ ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatWorkTime = (hours: number) => {
    const wholeHours = Math.floor(hours);
    const minutes = Math.round((hours - wholeHours) * 60);
    return `${wholeHours}h ${minutes}m`;
  };

  // Ïä§ÏºÄÏ§Ñ ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatScheduleDuration = (start: string, end: string) => {
    if (!start || !end) return '-';
    
    try {
      const startTime = new Date(`2000-01-01T${start}`);
      const endTime = new Date(`2000-01-01T${end}`);
      const diffMs = endTime.getTime() - startTime.getTime();
      const diffHours = diffMs / (1000 * 60 * 60);
      
      return `${Math.round(diffHours)}h`;
    } catch (error) {
      return '-';
    }
  };

  // ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò
  const getActualStatus = (record: AttendanceRecord) => {
    if (!record.actual_start) return 'not_checked_in';
    if (!record.actual_end) return 'working';
    return 'completed';
  };

  // ÏÉÅÌÉúÎ≥Ñ Ïä§ÌÉÄÏùº
  const getStatusStyle = (status: string) => {
    switch (status) {
      case 'completed': return 'text-green-600 bg-green-100';
      case 'working': return 'text-blue-600 bg-blue-100';
      case 'break': return 'text-orange-600 bg-orange-100';
      case 'not_checked_in': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  // ÏÉÅÌÉúÎ≥Ñ ÏïÑÏù¥ÏΩò
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-4 h-4" />;
      case 'working': return <Clock className="w-4 h-4" />;
      case 'break': return <Coffee className="w-4 h-4" />;
      case 'not_checked_in': return <XCircle className="w-4 h-4" />;
      default: return <AlertCircle className="w-4 h-4" />;
    }
  };

  // ÏÉÅÌÉúÎ≥Ñ ÌÖçÏä§Ìä∏
  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed': return 'ÏôÑÎ£å';
      case 'working': return 'Í∑ºÎ¨¥Ï§ë';
      case 'break': return 'Ìú¥ÏãùÏ§ë';
      case 'not_checked_in': return 'ÎØ∏Ï∂úÍ∑º';
      default: return 'ÎåÄÍ∏∞';
    }
  };

  // ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞
  const filteredRecords = attendanceRecords.filter(record => {
    const matchesSearch = !searchTerm || 
      record.employee_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.employee_id_code.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch;
  });

  // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
  const completedCount = filteredRecords.filter(r => getActualStatus(r) === 'completed').length;
  const workingCount = filteredRecords.filter(r => getActualStatus(r) === 'working').length;
  const breakCount = 0; // Ìú¥Ïãù ÏÉÅÌÉúÎäî Î≥ÑÎèÑ Î°úÏßÅÏúºÎ°ú Ï≤òÎ¶¨
  const notCheckedInCount = filteredRecords.filter(r => getActualStatus(r) === 'not_checked_in').length;
  
  const avgHours = filteredRecords.length > 0 
    ? filteredRecords.reduce((sum, r) => sum + r.total_hours, 0) / filteredRecords.length 
    : 0;

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Ìó§Îçî */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Ï∂úÍ∑º Í¥ÄÎ¶¨</h1>
              <p className="mt-2 text-gray-600">ÏßÅÏõêÎì§Ïùò Ï∂úÍ∑ºÏ≤¥ÌÅ¨ ÏúÑÏπò/ÏãúÍ∞Ñ ÌôïÏù∏ Î∞è Í¥ÄÎ¶¨</p>
            </div>
            <div className="flex space-x-3">
              <button className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors">
                ÎîîÎ≤ÑÍ∑∏ Î≥¥Í∏∞
              </button>
              <button className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
                ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú
              </button>
            </div>
          </div>
        </div>

        {/* ÌïÑÌÑ∞ ÏÑπÏÖò */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">ÎÇ†Ïßú</label>
              <input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Î∂ÄÏÑú</label>
              <select
                value={selectedDepartment}
                onChange={(e) => setSelectedDepartment(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Ï†ÑÏ≤¥ Î∂ÄÏÑú">Ï†ÑÏ≤¥ Î∂ÄÏÑú</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Í≤ÄÏÉâ</label>
              <input
                type="text"
                placeholder="Ïù¥Î¶Ñ ÎòêÎäî ÏÇ¨Î≤à"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div className="flex items-end">
              <button
                onClick={loadData}
                className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                ÌïÑÌÑ∞ Ï†ÅÏö©
              </button>
            </div>
          </div>
        </div>

        {/* ÏöîÏïΩ Ïπ¥Îìú */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Ï∂úÍ∑º ÏôÑÎ£å</p>
                <p className="text-2xl font-bold text-green-600">{completedCount}Î™Ö</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Clock className="w-6 h-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Í∑ºÎ¨¥ Ï§ë</p>
                <p className="text-2xl font-bold text-blue-600">{workingCount}Î™Ö</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Coffee className="w-6 h-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Ìú¥Ïãù Ï§ë</p>
                <p className="text-2xl font-bold text-orange-600">{breakCount}Î™Ö</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <XCircle className="w-6 h-6 text-red-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">ÎØ∏Ï∂úÍ∑º</p>
                <p className="text-2xl font-bold text-red-600">{notCheckedInCount}Î™Ö</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <BarChart3 className="w-6 h-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">ÌèâÍ∑† Í∑ºÎ¨¥ÏãúÍ∞Ñ</p>
                <p className="text-2xl font-bold text-purple-600">
                  {avgHours > 0 ? formatWorkTime(avgHours) : '0h 0m'}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Ï∂úÍ∑º Í∏∞Î°ù ÌÖåÏù¥Î∏î */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">Ï∂úÍ∑º Í∏∞Î°ù</h2>
            <p className="text-sm text-gray-600">Ï¥ù {filteredRecords.length}Î™ÖÏùò Í∏∞Î°ù</p>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏßÅÏõê Ï†ïÎ≥¥
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ïä§ÏºÄÏ§Ñ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ïã§Ï†ú Ï∂úÍ∑º
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ï†êÏã¨ Ìú¥Ïãù
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ïã§Ï†ú Ìá¥Í∑º
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Í∑ºÎ¨¥ ÏãúÍ∞Ñ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏúÑÏπò
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏÉÅÌÉú
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ïï°ÏÖò
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredRecords.map((record) => {
                  const actualStatus = getActualStatus(record);
                  return (
                    <tr key={record.employee_id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                              <span className="text-sm font-medium text-blue-600">
                                {record.employee_name.charAt(0)}
                              </span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {record.employee_name}
                            </div>
                            <div className="text-sm text-gray-500">
                              {record.employee_id_code} ‚Ä¢ {record.employment_type}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {record.scheduled_start && record.scheduled_end ? (
                            <>
                              {formatTime(record.scheduled_start)} - {formatTime(record.scheduled_end)}
                              <br />
                              <span className="text-xs text-gray-500">
                                ({formatScheduleDuration(record.scheduled_start, record.scheduled_end)})
                              </span>
                            </>
                          ) : (
                            <span className="text-gray-400">---</span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {editingRecord === record.employee_id ? (
                          <div className="text-sm text-gray-900">
                            <div className="font-medium mb-1">Ïã§Ï†ú Ï∂úÍ∑º</div>
                            <input
                              type="time"
                              value={editForm.checkInTime}
                              onChange={(e) => setEditForm({...editForm, checkInTime: e.target.value})}
                              className="w-full px-2 py-1 text-xs border border-gray-300 rounded"
                            />
                          </div>
                        ) : (
                          <div className="text-sm text-gray-900">
                            <div className="font-medium">Ïã§Ï†ú Ï∂úÍ∑º</div>
                            <div className="text-xs text-gray-500">
                              {formatTime(record.actual_start)}
                            </div>
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">-</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {editingRecord === record.employee_id ? (
                          <div className="text-sm text-gray-900">
                            <div className="font-medium mb-1">Ïã§Ï†ú Ìá¥Í∑º</div>
                            <input
                              type="time"
                              value={editForm.checkOutTime}
                              onChange={(e) => setEditForm({...editForm, checkOutTime: e.target.value})}
                              className="w-full px-2 py-1 text-xs border border-gray-300 rounded"
                            />
                          </div>
                        ) : (
                          <div className="text-sm text-gray-900">
                            <div className="font-medium">Ïã§Ï†ú Ìá¥Í∑º</div>
                            <div className="text-xs text-gray-500">
                              {formatTime(record.actual_end)}
                            </div>
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {record.total_hours > 0 ? formatWorkTime(record.total_hours) : '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="text-xs text-gray-500">ÏúÑÏπò ÏóÜÏùå</span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusStyle(actualStatus)}`}>
                          {getStatusIcon(actualStatus)}
                          <span className="ml-1">{getStatusText(actualStatus)}</span>
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        {editingRecord === record.employee_id ? (
                          <div className="flex space-x-2">
                            <button 
                              onClick={() => saveEdit(record)}
                              className="text-green-600 hover:text-green-900"
                              title="Ï†ÄÏû•"
                            >
                              <Save className="w-4 h-4" />
                            </button>
                            <button 
                              onClick={cancelEdit}
                              className="text-red-600 hover:text-red-900"
                              title="Ï∑®ÏÜå"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                        ) : (
                          <div className="flex space-x-2">
                            <button 
                              onClick={() => startEdit(record)}
                              className="text-blue-600 hover:text-blue-900"
                              title="Ï∂úÍ∑º/Ìá¥Í∑º ÏãúÍ∞Ñ ÏàòÏ†ï"
                            >
                              <Edit3 className="w-4 h-4" />
                            </button>
                            <button 
                              onClick={() => viewDetails(record)}
                              className="text-indigo-600 hover:text-indigo-900" 
                              title="ÏÉÅÏÑ∏Î≥¥Í∏∞"
                            >
                              <Eye className="w-4 h-4" />
                            </button>
                            <button 
                              onClick={() => viewStatistics(record)}
                              className="text-green-600 hover:text-green-900" 
                              title="ÌÜµÍ≥ÑÎ≥¥Í∏∞"
                            >
                              <BarChart3 className="w-4 h-4" />
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}